(self.webpackChunkmeta_system_docs=self.webpackChunkmeta_system_docs||[]).push([[110],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),s=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=s(t.components);return a.createElement(d.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),p=s(n),k=r,u=p["".concat(d,".").concat(k)]||p[k]||c[k]||i;return n?a.createElement(u,l(l({ref:e},m),{},{components:n})):a.createElement(u,l({ref:e},m))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6324:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return m},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:3},d="Broker",s={unversionedId:"guides/broker",id:"guides/broker",isDocsHomePage:!1,title:"Broker",description:"If talking about extending MSYS functionality the Broker simply cannot be left behind, as It is responsible for creating an access layer for Meta-System internals and system data. It is only through the broker that an Addon can modify and interact with the system.",source:"@site/docs/guides/broker.md",sourceDirName:"guides",slug:"/guides/broker",permalink:"/meta-system-docs/docs/guides/broker",editUrl:"https://github.com/mapikit/meta-system-docs/edit/main/docs/guides/broker.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guides",previous:{title:"Creating Addons",permalink:"/meta-system-docs/docs/guides/creating-addons"},next:{title:"Contributing",permalink:"/meta-system-docs/docs/guides/contributing"}},m=[{value:"Structure",id:"structure",children:[]},{value:"Entities, Actions and Permissions List",id:"entities-actions-and-permissions-list",children:[{value:"Entity: Schemas - <code>broker.schemas</code>",id:"entity-schemas---brokerschemas",children:[]},{value:"Entity: Business Operations - <code>broker.businessOperations</code>",id:"entity-business-operations---brokerbusinessoperations",children:[]},{value:"Entity: Environment Values - <code>broker.envs</code>",id:"entity-environment-values---brokerenvs",children:[]},{value:"Entity: Addons - <code>broker.addons</code>",id:"entity-addons---brokeraddons",children:[]},{value:"Entity: Schema Functions - <code>broker.schemaFunctions</code>",id:"entity-schema-functions---brokerschemafunctions",children:[]},{value:"Entity: Business Operation Functions - <code>broker.bopFunctions</code>",id:"entity-business-operation-functions---brokerbopfunctions",children:[]},{value:"Entity: Addons Functions - <code>broker.addonFunctions</code>",id:"entity-addons-functions---brokeraddonfunctions",children:[]},{value:"Entity: Logger - <code>broker.logger</code>",id:"entity-logger---brokerlogger",children:[]}]}],c={toc:m};function p(t){var e=t.components,n=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"broker"},"Broker"),(0,i.kt)("p",null,"If talking about extending MSYS functionality the Broker simply cannot be left behind, as It is responsible for creating an access layer for Meta-System internals and system data. It is only through the broker that an Addon can modify and interact with the system."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Separation of Data and Operations")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Meta-System also uses the broker internally, never directly accessing the data. This keeps the data decoupled from the rest of the system, and makes adding new functionallity to MSYS a lot easier! \ud83c\udf89"))),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"There's actually no big secret to the Broker's structure, it is an object in which every key reprents and entity category, and at the next level are the available operations for such entity as a function."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"broker.schemas.createSchema()")),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schemas")," Means the schemas of the system."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createSchema()")," Is an operation (action) to be executed in the system schemas."))),(0,i.kt)("p",null,"Such structure is followed for every entity and operation in Meta-System."),(0,i.kt)("p",null,"In addition to the entities, the Broker also carries an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"done()")," function at the root of the object, which every addon must call at the end of its ",(0,i.kt)("inlineCode",{parentName:"p"},'"configure"')," entrypoint function. This function configures the Addon's broker as ready for runtime, which means that any entity operation capable of modifying system behavior is removed from the Broker Object. This is done to ensure that Meta-System's behavior is consistent every time with a same set of system configurations before launching."),(0,i.kt)("h2",{id:"entities-actions-and-permissions-list"},"Entities, Actions and Permissions List"),(0,i.kt)("p",null,"As explained above, in the broker's entities we can use actions to interact with the system's data. However, in order to scope actions an Addon can do to a system, MSYS only populates entities and action that the Addon explicitly requests."),(0,i.kt)("p",null,"An Addon can do this by adding the entity and its permissions in the permissions array at its ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/guides/creating-addons#the-meta-file"},"Meta-File"),". For info on how to write the permissions array, refer to ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/guides/creating-addons#permissions---object-array-required"},"this section"),"."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Calling ",(0,i.kt)("inlineCode",{parentName:"h5"},"done()"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"As mentioned above, after calling ",(0,i.kt)("inlineCode",{parentName:"p"},"done()"),' on the broker, not all functions will be available. Check the "callable at runtime" value for knowing if the function keeps available after calling ',(0,i.kt)("inlineCode",{parentName:"p"},"done()"),"."))),(0,i.kt)("h3",{id:"entity-schemas---brokerschemas"},"Entity: Schemas - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.schemas")),(0,i.kt)("p",null,"Broker category for the ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/schema-config"},"system's schemas"),". This linked page also contains the type for the Schemas. Refer to it for the the properties, as all actions under this entity uses it."),(0,i.kt)("h4",{id:"action-get-schema"},"Action: Get Schema"),(0,i.kt)("p",null,"Gets schema by its identifier."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getSchema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_schema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getSchema(identifier: String) => void"))))),(0,i.kt)("h4",{id:"action-create-schema"},"Action: Create Schema"),(0,i.kt)("p",null,"Creates a new Schema in the system."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"createSchema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"create_schema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".createSchema(schema: Schema) => void"))))),(0,i.kt)("h4",{id:"action-get-all"},"Action: Get All"),(0,i.kt)("p",null,"Gets all Schemas from the System."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_all")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => Schema[]"))))),(0,i.kt)("h4",{id:"action-modify-schema"},"Action: Modify Schema"),(0,i.kt)("p",null,"Modifies a Schema in the System. The modified schema is selected by its ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier"),". Not allowed to use in runtime."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"modifySchema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"modify_schema")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".modifySchema(schema: Schema) => void"))))),(0,i.kt)("h3",{id:"entity-business-operations---brokerbusinessoperations"},"Entity: Business Operations - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.businessOperations")),(0,i.kt)("p",null,"This is the Broker category for the ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/bops/bops"},"BOps"),". This linked page contains the types for the Business operation used in this entity's functions."),(0,i.kt)("h4",{id:"action-get-bop"},"Action: Get BOp"),(0,i.kt)("p",null,"Gets a single business operation by its ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getBop")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_bop")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getBop(identifier: string) => BusinessOperation"))))),(0,i.kt)("h4",{id:"action-create-bop"},"Action: Create BOp"),(0,i.kt)("p",null,"Inserts a new Business Operation in the System's configuration. Meta-System does not differentiate Addon-inserted BOps from user-configured ones, meaning that the inserted BOp will be built (",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/architecture/flows#stitching-stage"},"Stitched"),") just like all the other configured ones."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"createBop")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"create_bop")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".createBop(bop: BusinessOperation) => void"))))),(0,i.kt)("h4",{id:"action-get-all-1"},"Action: Get All"),(0,i.kt)("p",null,"Gets all Business Operations from the System."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_all")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => BusinessOperation[]"))))),(0,i.kt)("h3",{id:"entity-environment-values---brokerenvs"},"Entity: Environment Values - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.envs")),(0,i.kt)("p",null,"The Broker category for the ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/basics#envs---required-array"},"Envs"),". This linked page contains the types for the Envs used in this Entity's actions."),(0,i.kt)("h4",{id:"action-get-env"},"Action: Get Env"),(0,i.kt)("p",null,"Gets a Env by its ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getEnv")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_env")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getEnv(envKey: string) => Env"))))),(0,i.kt)("h4",{id:"action-create-env"},"Action: Create Env"),(0,i.kt)("p",null,"Inserts a Environment value in the System's configuration."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"createEnv")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"create_env")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".createEnv(env: Env) => void"))))),(0,i.kt)("h4",{id:"action-get-all-2"},"Action: Get All"),(0,i.kt)("p",null,"Gets all Envs from the System."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_all")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => Env[]"))))),(0,i.kt)("h3",{id:"entity-addons---brokeraddons"},"Entity: Addons - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.addons")),(0,i.kt)("p",null,"This refers to the ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/addons-config"},"system's addons")," entity in the Broker. This linked page contains the types for the Addons used in this Entity's actions."),(0,i.kt)("h4",{id:"action-get-addon"},"Action: Get Addon"),(0,i.kt)("p",null,"Gets a Addon by its ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAddon")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_addon")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAddon(identifier: string) => Addon"))))),(0,i.kt)("h4",{id:"action-create-addon"},"Action: Create Addon"),(0,i.kt)("p",null,"Inserts a Addon into the System's configuration. Although available in the broker, this function is only used internally by Meta-System, and calling it in your Addon has no effect."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"createAddon")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"create_addon")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".createAddon(addon: Addon) => void"))))),(0,i.kt)("h4",{id:"action-get-all-3"},"Action: Get All"),(0,i.kt)("p",null,"Gets all Addons from the System."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_all")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => Addon[]"))))),(0,i.kt)("h3",{id:"entity-schema-functions---brokerschemafunctions"},"Entity: Schema Functions - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.schemaFunctions")),(0,i.kt)("p",null,"This is the Broker section about the Schema Functions. Schemas by themselves have no function other than just being a known entity for your system. When adding a function to a schema, though, you enable operations to be done using that object format, sort of like adding methods to a class."),(0,i.kt)("p",null,"Some applications of Schema functions include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Saving/Retrieving an entity in/from a Data Base"),(0,i.kt)("li",{parentName:"ul"},"Computing a Value from a property in the Schema")),(0,i.kt)("p",null,"Schema Functions does not necessarily need to receive an Schema as part of its input. If your function does so, however, it is recommended to leave the type as a ",(0,i.kt)("inlineCode",{parentName:"p"},"cloudedObject")," (by the ",(0,i.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/object-definition"},"Object Definition"),"). On later versions, MSYS will provide a custom type that will fill the appropriate schema type for you, so in the upcoming Meta-Editor (Meta-System's configuration graphical editor) users always have the correct type to use."),(0,i.kt)("p",null,"For this Section when ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaFunction")," type is mentioned, refer to this type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type MetaFunction = {\n  description ?: string;\n  input : ObjectDefinition;\n  output : ObjectDefinition;\n  functionName : stirng;\n}\n")),(0,i.kt)("h4",{id:"action-set-schema-functions"},"Action: Set Schema Functions"),(0,i.kt)("p",null,"Sets an schema function to a single schema. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"setSchemaFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"set_functions")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".setSchemaFunction(schemaIdentifier: string, func: Function, metaFunc: MetaFunction) => void"))))),(0,i.kt)("h4",{id:"action-get-schema-functions"},"Action: Get Schema Functions"),(0,i.kt)("p",null,"Gets a schema function (the callable Function) from a schema."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getSchemaFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_functions")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getSchemaFunction(functionName: string, schemaIdentifier: string) => Function"))))),(0,i.kt)("h4",{id:"action-preregister-schema-functions"},"Action: Preregister Schema Functions"),(0,i.kt)("p",null,"Declares only a function type for a Schema Function, leaving to set the callable function later, by using ",(0,i.kt)("inlineCode",{parentName:"p"},".setRegisteredSchemaFunction()"),". This is useful in cases where you cannot give the engine a callable function before your Addon is properly booted."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"preRegisterSchemaFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"preregister_functions")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".preRegisterSchemaFunction( schemaIdentifier: string, metaFunc: MetaFunction) => void"))))),(0,i.kt)("h4",{id:"action-set-registered-schema-functions"},"Action: Set Registered Schema Functions"),(0,i.kt)("p",null,"Sets a previously registered schema function."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"setRegisteredSchemaFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"set_registered_functions")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".setRegisteredSchemaFunction( schemaIdentifier: string, functionName: string, func: Function) => void"))))),(0,i.kt)("h3",{id:"entity-business-operation-functions---brokerbopfunctions"},"Entity: Business Operation Functions - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.bopFunctions")),(0,i.kt)("p",null,"This is the Broker section about Business Operation Functions. These are the callable functions that MSYS builds (stitches) from the system configuration input."),(0,i.kt)("h4",{id:"action-get-bop-function"},"Action: Get BOp Function"),(0,i.kt)("p",null,"Gets a callable Business Operation Function from the System."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getBopFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_function")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getBopFunction(bopIdentifier: string) => Function"))))),(0,i.kt)("h4",{id:"action-get-all-bop-functions"},"Action: Get All BOp Functions"),(0,i.kt)("p",null,"Gets all callable Business Operation Function from the System. Returns an array of the following type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type FunctionEntity = {\n  description ?: string;\n  input : ObjectDefinition;\n  output : ObjectDefinition;\n  functionName : stirng;\n  identifier: String;\n  callable : Function;\n}\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get_all")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => FunctionEntity[]"))))),(0,i.kt)("h4",{id:"action-override-bop-call"},"Action: Override BOp Call"),(0,i.kt)("p",null,"Replaces a built BOp with another function. Only affects future calls made to ",(0,i.kt)("inlineCode",{parentName:"p"},".getAll()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".getBopFunction()"),". The Stitching process is only affected if this is called during the ",(0,i.kt)("inlineCode",{parentName:"p"},'"configure"')," Addon step."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"overrideBopCall")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"override_call")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".overrideBopCall(bopIdentifier: string, func: Function, metaFunc: MetaFunction) => void"))))),(0,i.kt)("h4",{id:"action-add-bop-call"},"Action: Add Bop Call"),(0,i.kt)("p",null,"Adds a new Bop Function, as if MSYS has built it. Similar to the override action, only affects future calls made to ",(0,i.kt)("inlineCode",{parentName:"p"},".getAll()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".getBopFunction()"),". The Stitching process is only affected if this is called during the ",(0,i.kt)("inlineCode",{parentName:"p"},'"configure"')," Addon step."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"addBopCall")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"add_function")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".addBopCall(bopIdentifier: string, func: Function, metaFunc: MetaFunction) => void"))))),(0,i.kt)("h3",{id:"entity-addons-functions---brokeraddonfunctions"},"Entity: Addons Functions - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.addonFunctions")),(0,i.kt)("p",null,"This section refers to the Addons Functions. They are functions available for every BOp to use, just like internal ones."),(0,i.kt)("h4",{id:"action-register-addon-function"},"Action: Register Addon Function"),(0,i.kt)("p",null,"Adds a new Addon function into the system."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"register")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"register")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".register(func: Function, metaFunc: MetaFunction) => void"))))),(0,i.kt)("h4",{id:"action-get-addon-function"},"Action: Get Addon Function"),(0,i.kt)("p",null,"Gets addons functions set by you."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"get")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getFunction(functionName: string) => Function"))))),(0,i.kt)("h4",{id:"action-get-others-addon-functions"},"Action: Get Others Addon Functions"),(0,i.kt)("p",null,"Get addons functions added by any addons. Requires knowing system-installed addons' identifiers."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAddonFunction")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getOthers")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAddonFunction(addonIdentifier, func: Function) => Function"))))),(0,i.kt)("h4",{id:"action-get-all-functions"},"Action: Get All Functions"),(0,i.kt)("p",null,"Gets in a list, all addons functions in the system. Returns an array of the following type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type FunctionEntity = {\n  description ?: string;\n  input : ObjectDefinition;\n  output : ObjectDefinition;\n  functionName : stirng;\n  identifier: String;\n  callable : Function;\n}\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getAll")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getAll() => FunctionEntity[]"))))),(0,i.kt)("h4",{id:"action-get-functions-from-identifier"},"Action: Get Functions From Identifier"),(0,i.kt)("p",null,"Gets all addons functions set by a specific addon. Also returns an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"FunctionEntity"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getFromIdentifier")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"getFromIdentifier")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".getFromIdentifier(identifier: string) => FunctionEntity[]"))))),(0,i.kt)("h4",{id:"action-preregister-addon-functions"},"Action: Preregister Addon Functions"),(0,i.kt)("p",null,"Declares only the function type for an Addon Function, leaving to set the callable function later, by using ",(0,i.kt)("inlineCode",{parentName:"p"},".setRegistered()"),". This is useful in cases where you cannot give the engine a callable function before your Addon is properly booted."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"preregister")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"preregister")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"red"}}," \u2716 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".preregister(metaFunc: MetaFunction) => void"))))),(0,i.kt)("h4",{id:"action-set-registered-addon-functions"},"Action: Set Registered Addon Functions"),(0,i.kt)("p",null,"Sets a previously registered addon function."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Permission"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Callable at Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"setRegistered")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"set_registered")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{style:{color:"green"}}," \u2714 ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},".setRegistered(functionName: string, func: Function) => void"))))),(0,i.kt)("h3",{id:"entity-logger---brokerlogger"},"Entity: Logger - ",(0,i.kt)("inlineCode",{parentName:"h3"},"broker.logger")),(0,i.kt)("p",null,"Meta-System makes available for all addons to leverage the built in logger, so you don't have to go console-logging your way. All logger actions are available both before and during runtime, and require no permissions. All functions accept anything as an arugment."),(0,i.kt)("p",null,"Available functions are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"fatal"),(0,i.kt)("li",{parentName:"ul"},"success"),(0,i.kt)("li",{parentName:"ul"},"operation"),(0,i.kt)("li",{parentName:"ul"},"error"),(0,i.kt)("li",{parentName:"ul"},"warn"),(0,i.kt)("li",{parentName:"ul"},"info"),(0,i.kt)("li",{parentName:"ul"},"debug")))}p.isMDXComponent=!0}}]);