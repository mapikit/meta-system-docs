"use strict";(self.webpackChunkmeta_system_docs=self.webpackChunkmeta_system_docs||[]).push([[5375],{4137:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>m});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},b=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(t),b=i,m=p["".concat(l,".").concat(b)]||p[b]||u[b]||s;return t?n.createElement(m,r(r({ref:a},c),{},{components:t})):n.createElement(m,r({ref:a},c))}));function m(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=b;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},2264:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=t(7462),i=(t(7294),t(4137));const s={sidebar_position:4},r="Constants and Variables",o={unversionedId:"api-docs/configuring/bops/constants-and-variables",id:"api-docs/configuring/bops/constants-and-variables",title:"Constants and Variables",description:"Constants and variables are, respectively, static and variable data that you can use in your BOps as arguments to modules. A good example of this would be to set a default state when an entity is created; It can be easily done with a constant.",source:"@site/docs/api-docs/configuring/bops/constants-and-variables.md",sourceDirName:"api-docs/configuring/bops",slug:"/api-docs/configuring/bops/constants-and-variables",permalink:"/meta-system-docs/docs/api-docs/configuring/bops/constants-and-variables",draft:!1,editUrl:"https://github.com/mapikit/meta-system-docs/edit/main/docs/api-docs/configuring/bops/constants-and-variables.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Flows",permalink:"/meta-system-docs/docs/api-docs/configuring/bops/flows"},next:{title:"Modules Dependencies",permalink:"/meta-system-docs/docs/api-docs/configuring/bops/dependencies"}},l={},d=[{value:"Constants",id:"constants",level:2},{value:"Variables",id:"variables",level:2},{value:"Initializing Constants and Variables",id:"initializing-constants-and-variables",level:2},{value:"Accessing Constants and Variables",id:"accessing-constants-and-variables",level:2},{value:"Setting The Value of Variables",id:"setting-the-value-of-variables",level:2},{value:"<code>&quot;increaseVariables&quot;</code>",id:"increasevariables",level:3},{value:"Inputs",id:"inputs",level:4},{value:"Outputs",id:"outputs",level:4},{value:"<code>&quot;decreaseVariables&quot;</code>",id:"decreasevariables",level:3},{value:"<code>&quot;setVariables&quot;</code>",id:"setvariables",level:3},{value:"Inputs",id:"inputs-1",level:4}],c={toc:d},p="wrapper";function u(e){let{components:a,...t}=e;return(0,i.kt)(p,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"constants-and-variables"},"Constants and Variables"),(0,i.kt)("p",null,"Constants and variables are, respectively, static and variable data that you can use in your BOps as arguments to modules. A good example of this would be to set a default state when an entity is created; It can be easily done with a constant."),(0,i.kt)("h2",{id:"constants"},"Constants"),(0,i.kt)("p",null,"This is a property of a Business Operation. The data set in the constants cannot be changed and is accessible as a dependency in all the functions in the same Business Operation."),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'"variables"')," is also a property of a Business Operation. The data set here can be changed by three functions: ",(0,i.kt)("inlineCode",{parentName:"p"},'"increaseVariable"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"decreaseVariable"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"setVariable"'),", which we will talk about later in this same page. The variables can also be passed as dependencies for every module in the BOps it was declared."),(0,i.kt)("h2",{id:"initializing-constants-and-variables"},"Initializing Constants and Variables"),(0,i.kt)("p",null,"In order to initialize their values, we just need to specify to Meta-System what are their names, types, and initial value. Since both ",(0,i.kt)("inlineCode",{parentName:"p"},'"constants"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"variables"')," are arrays, we should do it as the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// For Constants\n{ "name": "your-constant-name", "type": "<TYPE_ENUM>", "value": "some value" }\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// For Variables\n{ "name": "your-constant-name", "type": "<TYPE_ENUM>", "initialValue": "some value" }\n// the initialValue is optional\n')),(0,i.kt)("p",null,"The property ",(0,i.kt)("inlineCode",{parentName:"p"},'"type"'),' can be one of the following values: "string", "date", "number", "boolean", "object", "array", "any". Of course, the value set of that constant or variable needs be of the same type declared.'),(0,i.kt)("h2",{id:"accessing-constants-and-variables"},"Accessing Constants and Variables"),(0,i.kt)("p",null,"They can be accessed as a dependency for any modules of the BOps they were declared in. For more reference of how to do it, see the ",(0,i.kt)("a",{parentName:"p",href:"./dependencies"},"Dependencies")," documentation."),(0,i.kt)("h2",{id:"setting-the-value-of-variables"},"Setting The Value of Variables"),(0,i.kt)("p",null,"Meta-System provides three ways of setting a value of a variable, in the form of functions you can use in your BOps: ",(0,i.kt)("inlineCode",{parentName:"p"},'"increaseVariable"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"decreaseVariable"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"setVariable"'),"."),(0,i.kt)("h3",{id:"increasevariables"},(0,i.kt)("inlineCode",{parentName:"h3"},'"increaseVariables"')),(0,i.kt)("p",null,"As the name suggests, it increases the value of a variable by ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". The variable to be modified needs to be a number."),(0,i.kt)("p",null,"You can require this function in your flow with ",(0,i.kt)("inlineCode",{parentName:"p"},'"moduleType": "variable"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"moduleName": "increaseVariable"'),"."),(0,i.kt)("h4",{id:"inputs"},"Inputs"),(0,i.kt)("p",null,"You can pass any variable of number type as dependencies of this function. The input must follow this pattern:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{ "origin": "variable", "originPath": "<variableName>", "targetPath": "<variableName>" }\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<variableName>")," should be replaced by the name set while initializing the variable."),(0,i.kt)("h4",{id:"outputs"},"Outputs"),(0,i.kt)("p",null,"There is only one output, and it is ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedCount"),", which a number representing the amount of variables increased by the function."),(0,i.kt)("h3",{id:"decreasevariables"},(0,i.kt)("inlineCode",{parentName:"h3"},'"decreaseVariables"')),(0,i.kt)("p",null,"It works similarly to the ",(0,i.kt)("inlineCode",{parentName:"p"},'"increaseVariable"')," function, but this one decreases the value of the variable by ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". Both the inputs and outputs are the same."),(0,i.kt)("h3",{id:"setvariables"},(0,i.kt)("inlineCode",{parentName:"h3"},'"setVariables"')),(0,i.kt)("p",null,"This function sets the value of the variables to the provided arguments."),(0,i.kt)("h4",{id:"inputs-1"},"Inputs"),(0,i.kt)("p",null,"The dependencies of this function should have the ",(0,i.kt)("inlineCode",{parentName:"p"},"origin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"originPath")," pointing to the new value the variable should be set to. ",(0,i.kt)("inlineCode",{parentName:"p"},"targetPath")," should be equal to the value of the variable."))}u.isMDXComponent=!0}}]);