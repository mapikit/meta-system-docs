"use strict";(self.webpackChunkmeta_system_docs=self.webpackChunkmeta_system_docs||[]).push([[1325],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(4137));const o={sidebar_position:1},i="Base Concepts",s={unversionedId:"api-docs/architecture/software-design",id:"api-docs/architecture/software-design",title:"Base Concepts",description:"Meta-System was built from the ground up to be as extensible and modular as possible. If we remove all the built-in extra functionality, Meta-System can be understood as a no-code engine with interfaces for modifying it.",source:"@site/docs/api-docs/architecture/software-design.md",sourceDirName:"api-docs/architecture",slug:"/api-docs/architecture/software-design",permalink:"/meta-system-docs/docs/api-docs/architecture/software-design",draft:!1,editUrl:"https://github.com/mapikit/meta-system-docs/edit/main/docs/api-docs/architecture/software-design.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Meta-System",permalink:"/meta-system-docs/docs/api-docs/getting-started"},next:{title:"Extending Functionality",permalink:"/meta-system-docs/docs/api-docs/architecture/extending-functionality"}},c={},l=[{value:"Theory",id:"theory",level:2},{value:"Translating it Into Meta-System",id:"translating-it-into-meta-system",level:2},{value:"Into Real World",id:"into-real-world",level:2},{value:"Further Reading",id:"further-reading",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"base-concepts"},"Base Concepts"),(0,r.kt)("p",null,"Meta-System was built from the ground up to be as extensible and modular as possible. If we remove all the built-in extra functionality, Meta-System can be understood as a no-code engine with interfaces for modifying it."),(0,r.kt)("h2",{id:"theory"},"Theory"),(0,r.kt)("p",null,"As an engine to be capable of powering (almost) any software, Meta-System is required to have a structure capable of representing any software, or any part of a more complex software. Because of this, we came up with a theory on how we could abstract software in general."),(0,r.kt)("p",null,"We ended up separating Meta-System into three main parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Data"),(0,r.kt)("li",{parentName:"ul"},"Processes"),(0,r.kt)("li",{parentName:"ul"},"Interfaces")),(0,r.kt)("p",null,"For MSYS, the ",(0,r.kt)("strong",{parentName:"p"},"Data")," stands for contextualized information, such as in a car (context), how many seats there are (information). The ",(0,r.kt)("strong",{parentName:"p"},"Processes")," defines operations and constraints to how act upon the ",(0,r.kt)("strong",{parentName:"p"},"Data"),". For instance, it is not possible to put more seats in a car than what its interior space allows. Lastly, the ",(0,r.kt)("strong",{parentName:"p"},"Interfaces")," are how to connect with the outside world, allowing external input into the system, using a ",(0,r.kt)("strong",{parentName:"p"},"Process")," to interact with ",(0,r.kt)("strong",{parentName:"p"},"Data"),"."),(0,r.kt)("p",null,"With chaining and defining each of this things, it is possible, in theory, to create any system, and that is what we wanted Meta-System to be capable of."),(0,r.kt)("h2",{id:"translating-it-into-meta-system"},"Translating it Into Meta-System"),(0,r.kt)("p",null,"In Meta-System, the data is called ",(0,r.kt)("strong",{parentName:"p"},"Schemas"),", the processes are called ",(0,r.kt)("strong",{parentName:"p"},"Business Operations"),", and the interfaces are expected to be provided by ",(0,r.kt)("strong",{parentName:"p"},"Addons"),"."),(0,r.kt)("p",null,"Shortly explained, by declaring ",(0,r.kt)("strong",{parentName:"p"},"Schemas"),", you will be defining the context of informations, defining their format, and assigning it a name, which will be how Meta-System will identify it."),(0,r.kt)("p",null,"Defining the ",(0,r.kt)("strong",{parentName:"p"},"Business Operations (BOps)")," consists in organizing rules and actions in a specific sequence and conditions."),(0,r.kt)("p",null,"Finally, declaring a ",(0,r.kt)("strong",{parentName:"p"},"Addons")," means extending and modifying behaviors in any of the three software regions: Data, Processes, and Interfaces."),(0,r.kt)("p",null,"Those are the main components of MSYS, ",(0,r.kt)("strong",{parentName:"p"},"Schemas, Business Operations, and Addons"),". All of them are independent from eachother, but can be configured to interact. For example, an ",(0,r.kt)("strong",{parentName:"p"},"Addon")," may call a ",(0,r.kt)("strong",{parentName:"p"},"Business Operation"),", which in its flow and rules, accesses a ",(0,r.kt)("strong",{parentName:"p"},"Schema")," to operate with its data."),(0,r.kt)("h2",{id:"into-real-world"},"Into Real World"),(0,r.kt)("p",null,"To put it simply, MSYS gets data, and creates a software out of it. It works by taking in data as those main components, declared in a configuration format, and wiring up their code counterparts as specified in the same configuration."),(0,r.kt)("p",null,'This "conversion" process is divided into the following steps:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Validation"),": The initial configuration is validated so it can be used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Initialization"),": Meta-System stores the configured components internally"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Import"),": Addons are imported into the engine"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Extension"),": One by one, Addons specify how they extend MSYS and available components"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Build"),": All the data after extension/modification is wired with their respective code counterparts. The results of this built process is then stored internally as well. After this step, no functionality can be changed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Run"),": The code is run by Addons.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Meta-System does not have any internal instruction on how to run a Process (Business Operation), so it is expected to use Addons for this. The output system is composed of JavaScript functions, so simply calling them will execute the functionality specified. ")),(0,r.kt)("h2",{id:"further-reading"},"Further Reading"),(0,r.kt)("p",null,"This page introduces you to the general idea of how Meta-System works under the hood, but you may still want to know ",(0,r.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/architecture/extending-functionality"},"how MSYS can be extended"),", or ",(0,r.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/architecture/flows"},"how the operations flows are constructed"),"."),(0,r.kt)("p",null,"If you think you're ready to start building with MSYS, head to the ",(0,r.kt)("a",{parentName:"p",href:"/meta-system-docs/docs/api-docs/configuring/basics"},"configuring page"),"."))}u.isMDXComponent=!0}}]);